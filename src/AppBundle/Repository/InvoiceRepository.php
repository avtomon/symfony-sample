<?php

namespace AppBundle\Repository;

use AppBundle\Constants\WhereConditions;
use AppBundle\SearchContext\ApiInvoiceListSearchContext;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends \Doctrine\ORM\EntityRepository
{
    public const DATE_FORMAT = 'Y-m-d';

    public const BIGINT_MAX = 9223372036854775807;

    /**
     * @param ApiInvoiceListSearchContext $context
     *
     * @return Paginator
     */
    public function findByContext(ApiInvoiceListSearchContext $context) : Paginator
    {
        $qb = $this->createQueryBuilder('invoice');

        $where = $context->getWhere();

        // date filters
        if ($where->getDateFromAsDateTime() !== null) {
            $qb->andWhere('invoice.createdAt >= :date_from')
                ->setParameter('date_from', $where->getDateFromAsDateTime()->format(static::DATE_FORMAT));
        }
        if ($where->getDateToAsDateTime() !== null) {
            $qb->andWhere('invoice.createdAt < :date_to')
                ->setParameter('date_to', $where->getDateToAsDateTime()->format(static::DATE_FORMAT));
        }

        // event order filters
        $joinEventOrder = false;
        if ($where->getOrderId()) {
            $joinEventOrder = true;
            $qb
                ->andWhere('JSON_GET_TEXT(transaction_token.contextRequest, \'order_id\') IN (:order_id)')
                ->setParameter('order_id', $where->getOrderId());
        }
        if ($where->getOrderStatus()) {
            $joinEventOrder = true;
            $qb
                ->andWhere('JSON_GET_TEXT(transaction_token.contextRequest, \'order_status\') IN (:status)')
                ->setParameter('status', $where->getOrderStatus());
        }
        if ($joinEventOrder) {
            $qb->join('invoice.transactionToken', 'transaction_token');
        }

        // source balance filters
        $joinSourceBalances = false;
        $joinTargetBalances = false;
        if (strcasecmp($where->getSourceTargetCondition(), WhereConditions:: OR) === 0) {
            $joinSourceBalances = true;
            $joinTargetBalances = true;

            if ($where->getTargetObjectId() && $where->getSourceObjectId()) {
                $sourceTargetWhereSQL =
                    '((target_balance.objectId IN (:target_object_id)
                       AND target_balance.objectType IN (:target_object_type)
                       AND target_balance.type IN (:target_balance_type))
                       OR
                      (source_balance.objectId IN (:source_object_id)
                       AND source_balance.objectType IN (:source_object_type)
                       AND source_balance.type IN (:source_balance_type))
                       )';

                $qb->andWhere($sourceTargetWhereSQL);
                $qb->setParameter('target_object_type', $where->getTargetObjectType());
                $qb->setParameter('target_object_id', $where->getTargetObjectId());
                $qb->setParameter('source_object_type', $where->getSourceObjectType());
                $qb->setParameter('source_object_id', $where->getSourceObjectId());
                $qb->setParameter('target_balance_type', $where->getTargetBalanceType());
                $qb->setParameter('source_balance_type', $where->getSourceBalanceType());
            }

            if ($where->isProcessed()) {
                $sourceBalanceTypeSql = 'source_balance.type NOT IN (:source_types) 
                AND target_balance.type NOT IN (:target_types)';
                $qb->andWhere($sourceBalanceTypeSql)
                    ->setParameter('source_types', ['suspended'])
                    ->setParameter('target_types', ['suspended']);
            }

            if ($where->getTargetCurrencyCode() && $where->getSourceCurrencyCode()) {
                $sourceTargetWhereSQL =
                    '(target_balance.currencyCode IN (:target_currency)
                      OR
                      source_balance.currencyCode IN (:source_currency))';
                $qb->andWhere($sourceTargetWhereSQL);
                $qb->setParameter('target_currency', $where->getTargetCurrencyCode());
                $qb->setParameter('source_currency', $where->getSourceCurrencyCode());
            }

            if ($where->getTargetBalanceType() && $where->getSourceBalanceType()) {
                $sourceTargetWhereSQL =
                    '(target_balance.type IN (:target_balance_type)
                      OR
                      source_balance.type IN (:source_balance_type))';
                $qb->andWhere($sourceTargetWhereSQL);
                $qb->setParameter('target_balance_type', $where->getTargetBalanceType());
                $qb->setParameter('source_balance_type', $where->getSourceBalanceType());
            }

            if ($where->getTargetAccountType() && $where->getSourceAccountType()) {
                $sourceTargetWhereSQL =
                    '(target_balance.accountType IN (:target_account_type)
                      OR
                      source_balance.accountType IN (:source_account_type))';
                $qb->andWhere($sourceTargetWhereSQL);
                $qb->setParameter('target_account_type', $where->getTargetAccountType());
                $qb->setParameter('source_account_type', $where->getSourceAccountType());
            }

            $sort = $context->getSort();
            if ($sort->getDebit()) {
                $emptyValue = strcasecmp($sort->getDebit(), 'asc') === 0 ? static::BIGINT_MAX : -1;
                $qb->addSelect('(CASE 
                    WHEN target_balance.objectId = :target_object_id AND target_balance.objectType= :target_object_type 
                    THEN invoice.targetAmount ELSE :empty_value END) as hidden debit');
                $qb->setParameter('target_object_id', $where->getTargetObjectId());
                $qb->setParameter('target_object_type', $where->getTargetObjectType());
                $qb->setParameter('empty_value', $emptyValue);
                $qb->orderBy('debit', $sort->getDebit());
            }
            if ($sort->getCredit()) {
                $emptyValue = strcasecmp($sort->getCredit(), 'asc') === 0 ? static::BIGINT_MAX : -1;
                $qb->addSelect('(CASE 
                    WHEN source_balance.objectId = :source_object_id AND source_balance.objectType= :source_object_type 
                    THEN invoice.sourceAmount ELSE :empty_value END) as hidden credit');
                $qb->setParameter('source_object_id', $where->getSourceObjectId());
                $qb->setParameter('source_object_type', $where->getSourceObjectType());
                $qb->setParameter('empty_value', $emptyValue);
                $qb->orderBy('credit', $sort->getCredit());
            }
            if ($sort->getId()) {
                $qb->orderBy('invoice.id', $sort->getId());
            }
        } else {
            if ($where->getTargetObjectType()) {
                $joinTargetBalances = true;
                $qb
                    ->andWhere('target_balance.objectType IN (:target_object_type)')
                    ->setParameter('target_object_type', $where->getTargetObjectType());
            }
            if ($where->getSourceObjectType()) {
                $joinSourceBalances = true;
                $qb
                    ->andWhere('source_balance.objectType IN (:source_object_type)')
                    ->setParameter('source_object_type', $where->getSourceObjectType());
            }
            if ($where->getTargetObjectId()) {
                $joinTargetBalances = true;
                $qb
                    ->andWhere('target_balance.objectId IN (:target_object_id)')
                    ->setParameter('target_object_id', $where->getTargetObjectId());
            }
            if ($where->getSourceObjectId()) {
                $joinSourceBalances = true;
                $qb
                    ->andWhere('source_balance.objectId IN (:source_object_id)')
                    ->setParameter('source_object_id', $where->getSourceObjectId());
            }
            if ($where->getTargetBalanceType()) {
                $joinTargetBalances = true;
                $qb
                    ->andWhere('target_balance.type IN (:target_balance_type)')
                    ->setParameter('target_balance_type', $where->getTargetBalanceType());
            }
            if ($where->getSourceBalanceType()) {
                $joinSourceBalances = true;
                $qb
                    ->andWhere('source_balance.type IN (:source_balance_type)')
                    ->setParameter(':source_balance_type', $where->getSourceBalanceType());
            }
            if ($where->getTargetAccountType()) {
                $joinTargetBalances = true;
                $qb
                    ->andWhere('target_balance.accountType IN (:target_account_type)')
                    ->setParameter('target_account_type', $where->getTargetAccountType());
            }
            if ($where->getSourceAccountType()) {
                $joinSourceBalances = true;
                $qb
                    ->andWhere('source_balance.accountType IN (:source_account_type)')
                    ->setParameter(':source_account_type', $where->getSourceAccountType());
            }
            if ($where->getTargetCurrencyCode()) {
                $joinTargetBalances = true;
                $qb
                    ->andWhere('target_balance.currencyCode IN (:target_currency)')
                    ->setParameter('target_currency', $where->getTargetCurrencyCode());
            }
            if ($where->getSourceCurrencyCode()) {
                $joinSourceBalances = true;
                $qb
                    ->andWhere('source_balance.currencyCode IN (:source_currency)')
                    ->setParameter('source_currency', $where->getSourceCurrencyCode());
            }

            $sort = $context->getSort();
            if ($sort->getDebit()) {
                $emptyValue = strcasecmp($sort->getDebit(), 'asc') === 0 ? static::BIGINT_MAX : -1;
                $qb->addSelect('(CASE 
                    WHEN target_balance.objectId = :target_object_id AND target_balance.objectType= :target_object_type 
                    THEN invoice.targetAmount ELSE :empty_value END) as hidden debit');
                $qb->setParameter('target_object_id', $where->getTargetObjectId());
                $qb->setParameter('target_object_type', $where->getTargetObjectType());
                $qb->setParameter('empty_value', $emptyValue);
                $qb->orderBy('debit', $sort->getDebit());
            }
            if ($sort->getCredit()) {
                $emptyValue = strcasecmp($sort->getCredit(), 'asc') === 0 ? static::BIGINT_MAX : -1;
                $qb->addSelect('(CASE 
                    WHEN source_balance.objectId = :source_object_id AND source_balance.objectType= :source_object_type 
                    THEN invoice.sourceAmount ELSE :empty_value END) as hidden credit');
                $qb->setParameter('source_object_id', $where->getSourceObjectId());
                $qb->setParameter('source_object_type', $where->getSourceObjectType());
                $qb->setParameter('empty_value', $emptyValue);
                $qb->orderBy('credit', $sort->getCredit());
            }
            if ($sort->getId()) {
                $qb->orderBy('invoice.id', $sort->getId());
            }
        }

        if ($where->isNotProcessed()) {
            $qb->andWhere('invoice.nextId IS NULL AND invoice.type <> :type')
                ->setParameter('type', 'future_payment_complete');
        }

        if ($where->getOperationType()) {
            $qb
                ->andWhere('invoice.type IN (:target_operation_type)')
                ->setParameter('target_operation_type', $where->getOperationType());
        }

        if ($joinSourceBalances) {
            $qb->leftJoin('invoice.sourceBalance', 'source_balance');
        }

        if ($joinTargetBalances) {
            $qb->leftJoin('invoice.targetBalance', 'target_balance');
        }

        return new Paginator(
            $qb->getQuery()
                ->setMaxResults($context->getLimit())
                ->setFirstResult($context->getOffset())
        );
    }
}
